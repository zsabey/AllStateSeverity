
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##Libraries
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(embed)
> library(themis)
> 
> trainCsv <- read_csv("train.csv") %>%
+   mutate_at(vars(cat1:cat116), as.factor)
Rows: 188318 Columns: 132
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (116): cat1, cat2, cat3, cat4, cat5, cat6, cat7, cat8, cat9, cat10, cat1...
dbl  (16): id, cont1, cont2, cont3, cont4, cont5, cont6, cont7, cont8, cont9...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> testCsv <- read_csv("test.csv") %>%
+   mutate_at(vars(cat1:cat116), as.factor)
Rows: 125546 Columns: 131
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (116): cat1, cat2, cat3, cat4, cat5, cat6, cat7, cat8, cat9, cat10, cat1...
dbl  (15): id, cont1, cont2, cont3, cont4, cont5, cont6, cont7, cont8, cont9...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> 
> #Create the recipe and bake it
> 
> rf_recipe <- recipe(loss ~ ., data=trainCsv) %>%
+   #step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(loss)) #%>%
> #step_smote(all_outcomes(), neighbors=5)
> 
> prep <- prep(rf_recipe)
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
Warning messages:
1: In optwrap(optimizer, devfun, getStart(start, rho$pp), lower = rho$lower,  :
  convergence code -4 from nloptwrap: NLOPT_ROUNDOFF_LIMITED: Roundoff errors led to a breakdown of the optimization algorithm. In this case, the returned minimum may still be useful. (e.g. this error occurs in NEWUOA if one tries to achieve a tolerance too close to machine precision.)
2: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  unable to evaluate scaled gradient
3: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge: degenerate  Hessian with 1 negative eigenvalues
4: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  unable to evaluate scaled gradient
5: In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge: degenerate  Hessian with 1 negative eigenvalues
> baked <- bake(prep, new_data = NULL)
> baked
# A tibble: 188,318 × 132
      id  cat1  cat2  cat3  cat4  cat5  cat6  cat7  cat8  cat9 cat10 cat11 cat12
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1     1 3408. 3800. 2902. 3488. 2815. 3260. 2909. 2976. 3828. 2694. 4929. 2656.
 2     2 3408. 3800. 2902. 2827. 2815. 3260. 2909. 2976. 3828. 4994. 2811. 2656.
 3     5 3408. 3800. 2902. 2827. 3464. 3260. 2909. 2976. 3828. 4994. 4929. 5177.
 4    10 1915. 3800. 2902. 3488. 2815. 3260. 2909. 2976. 3828. 2694. 2811. 2656.
 5    11 3408. 3800. 2902. 3488. 2815. 3260. 2909. 2976. 3828. 4994. 2811. 5177.
 6    13 3408. 3800. 2902. 2827. 2815. 3260. 2909. 2976. 3828. 2694. 2811. 2656.
 7    14 3408. 2454. 2902. 2827. 3464. 3260. 2909. 2976. 2512. 2694. 2811. 2656.
 8    20 3408. 3800. 2902. 3488. 2815. 3260. 2909. 2976. 3828. 2694. 2811. 2656.
 9    23 3408. 3800. 5366. 3488. 3464. 3260. 2909. 2976. 3828. 4994. 4929. 5177.
10    24 3408. 3800. 2902. 2827. 3464. 2520. 2909. 2976. 3828. 2694. 2811. 2656.
# ℹ 188,308 more rows
# ℹ 119 more variables: cat13 <dbl>, cat14 <dbl>, cat15 <dbl>, cat16 <dbl>,
#   cat17 <dbl>, cat18 <dbl>, cat19 <dbl>, cat20 <dbl>, cat21 <dbl>,
#   cat22 <dbl>, cat23 <dbl>, cat24 <dbl>, cat25 <dbl>, cat26 <dbl>,
#   cat27 <dbl>, cat28 <dbl>, cat29 <dbl>, cat30 <dbl>, cat31 <dbl>,
#   cat32 <dbl>, cat33 <dbl>, cat34 <dbl>, cat35 <dbl>, cat36 <dbl>,
#   cat37 <dbl>, cat38 <dbl>, cat39 <dbl>, cat40 <dbl>, cat41 <dbl>, …
> 
> 
> 
> #Set up the model
> my_mod <- rand_forest(mtry = tune(),
+                       min_n=tune(),
+                       trees=1000) %>%
+   set_engine("ranger") %>%
+   set_mode("regression")
> 
> ## Create a workflow with model & recipe
> rf_workflow <- workflow() %>%
+   add_recipe(rf_recipe) %>%
+   add_model(my_mod)
>   
>   
>   
>   ## Set up grid of tuning values
>   
>   #CV Results 1,23
> tuning_grid <- grid_regular(mtry(c(1,5)),
+                             min_n(),
+                               levels = 5)## L^2 total tuning possibilities
> 
> ## Set up K-fold CV
> folds <- vfold_cv(trainCsv, v = 3, repeats=1)
> 
> ## Run the CV
> CV_results <- rf_workflow %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+                  metrics=metric_set(mae)) #Or leave metrics NULL
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
→ A | warning: unable to evaluate scaled gradient, Model failed to converge: degenerate  Hessian with 1 negative eigenvalues
Tboundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
